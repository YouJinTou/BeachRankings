@model ConciseReviewViewModel

<div data-expanded="false" data-already-loaded="false" class="review concise-review row custom-canvas">
    <div class="col-md-2">
        <div class="review-avatar-box text-center">
            <img class="avatar-img img-responsive" src="@Model.AvatarPath" alt="No profile photo" />
        </div>
        <div class="text-center"><h4><a href="/User/Reviews?authorId=@Model.AuthorId">@Model.UserName</a></h4></div>
        @{ 
            if (Model.IsBlogger)
            {
                <div class="text-left"><a href="@Html.AttachSchemeToDomain(@Model.BlogUrl)" target="_blank">My blog</a></div>
            }
        }
        <div class="text-left">
            <h5>
                @Html.PluralizeValue(@Model.CountriesVisited, "country"), @Html.ActionLink(
                    linkText: Html.PluralizeValue(Model.ReviewsCount, "beach").ToString(), 
                    actionName: "Reviews", 
                    controllerName: "User", 
                    routeValues: new { authorId = Model.AuthorId },
                    htmlAttributes: null)
            </h5>
        </div>
        <div class="text-left">Level @Model.Level traveller</div>
        <div class="text-left">
            <h6>@Model.PostedOn.ToString("MMM d, yyyy")</h6>
        </div>
    </div>
    <div class="col-md-10">
        <div class="row">
            <div class="table-responsive col-xs-10">
                @Html.DisplayFor(Model => Model.Criteria)
            </div>  
            <div class="col-xs-2">
                <div class="review-upvotes pull-left col-xs-2">
                    <h4 class="text-left">
                        <i>+ @Model.Upvotes</i>
                    </h4>
                </div>
                <div class="beach-score-box beach-score-box-extended pull-right col-xs-12">
                    <div class="vertical-center">@Html.ParseNullableValue(Model.TotalScore, "-")</div>
                </div>
            </div>         
        </div>
        <div class="row">
            <div class="col-xs-11">               
                <p class="review-content text-justify">@Model.Content</p>   
                @{
                    if (Model.IsBlogger && Model.BlogArticles.Count() > 0)
                    {
                        <p class="text-left">
                            <i>Read more about it on my blog</i>: @Html.DisplayFor(model => model.BlogArticles)
                        </p>
                    }
                }             
            </div>  
            <div class="review-controls-box col-sm-1">
                @{
                    if (User.Identity.CanVoteForReview(Model.AuthorId))
                    {
                        <div>
                            <span data-review-id="@Model.Id" data-already-upvoted="@Model.AlreadyUpvoted" class="icon-upvote a-like-span control glyphicon glyphicon-thumbs-up" title="Give thanks"></span>
                        </div>
                    }
                }
                <div>
                    <a data-html-export-review="@Model.Id" class="review-export control a-like-span glyphicon glyphicon-export" title="Export a summary of this review to HTML"></a>
                </div>
                @{
                    if (User.Identity.CanEditReview(Model.AuthorId))
                    {
                        <div>
                            <a class="control a-like-span glyphicon glyphicon-edit" title="Edit review" href="/Reviews/Edit/@Model.Id"></a>
                        </div>
                        <div>
                            <a class="control a-like-span glyphicon glyphicon-remove" title="Delete review" href="/Reviews/Delete/@Model.Id"></a>
                        </div>
                    }
                }               
            </div>            
        </div>   
    </div>
</div>