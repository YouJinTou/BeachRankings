@model DetailedBeachViewModel

@{
    ViewBag.Title = Model.Name;
}

<div id="beach-details-container" class="col-xs-12">
    <aside class="beach-aside custom-canvas col-xs-offset-1 col-xs-2 text-left">
        <div class="aside-element">Country: <a href="/Countries/Beaches/@Model.CountryId">@Model.Country</a></div>
        <div class="aside-element">Region: <a href="/PrimaryDivisions/Beaches/@Model.PrimaryDivisionId">@Model.PrimaryDivision</a></div>
        <div class="aside-element">Area: <a href="/SecondaryDivisions/Beaches/@Model.SecondaryDivisionId">@Model.SecondaryDivision</a></div>
        <div class="aside-element">Sub-area: <a href="/TertiaryDivisions/Beaches/@Model.TertiaryDivisionId">@Model.TertiaryDivision</a></div>
        <div class="aside-element">Locality: <a href="/QuaternaryDivisions/Beaches/@Model.QuaternaryDivisionId">@Model.QuaternaryDivision</a></div>
        <div class="aside-element">Coordinates: @Model.Coordinates</div>
    </aside>

    <div class="beach-head custom-canvas col-xs-8">
        <div class="row">
            <div class="text-left beach-name col-xs-5">
                <h2>@Model.Name</h2>
                <div class="beach-score-box beach-score-box-extended col-xs-4">
                    <div class="vertical-center">@Html.ParseNullableValue(Model.TotalScore, "-")</div>
                </div>
                <h4>
                    <i>
                        <!-- We call ParseNullString in case the country has no primary divisions. Otherwise we would display something like ', Saint Helena' -->
                        @Html.ParseNullString(
                            @Html.GetBeachAnchorTagDivisionAddress(Model.PrimaryDivision, Model.SecondaryDivision, Model.PrimaryDivisionId, Model.SecondaryDivisionId) + ", ", 
                            null) 
                        <a href="/Countries/Beaches/@Model.CountryId">@Model.Country</a>
                    </i>
                </h4>
            </div>
            <div class="text-right col-xs-6">
                @{
                    if (!Model.UserHasRated)
                    {
                        @Html.ActionLink("Rate this beach", "Post", "Reviews", new { id = Model.Id }, new { @class = "btn btn-cta" })
                    }
                    else
                    {
                        <span class="already-rated pull-right glyphicon glyphicon-ok-circle" title="Already rated"></span>
                    }
                }
            </div>
        </div>
        <div class="row">
            <div class="slick-carousel col-xs-7">
                @Html.DisplayFor(model => model.Images) 
            </div>
            <div class="col-xs-4">
                <p class="beach-description-details text-justify">@Model.Description</p>
                <div class="row">
                    @{
                        if (User.Identity.CanEditBeach(Model.CreatorId, Model.Reviews.Count()))
                        {
                            <hr />

                            <div class="col-xs-12">
                                <form id="delete-beach-form" method="post" action="/Beaches/Delete/@Model.Id">
                                    <a class="a-like-span control glyphicon glyphicon-edit" title="Edit beach" href="/Beaches/Edit/@Model.Id"></a>
                                    <span id="delete-beach-span" title="Delete beach" class="a-like-span control glyphicon glyphicon-remove"></span>
                                </form>                                   
                            </div>
                        }
                    }
                </div>
            </div>
        </div>            
    </div>

    <hr />

    <div id="beach-reviews-container" class="col-xs-offset-3 col-xs-8">
        @Html.DisplayFor(m => m.Reviews)
    </div>
</div>


@{
    if (!this.Request.IsAjaxRequest())
    {
        @section Scripts {
            @Scripts.Render("~/Content/External/slick/slick.min.js")
            @Scripts.Render("~/Scripts/External/rainbowvis.js")
            @Scripts.Render("~/Scripts/External/dragdealer.js")
            @Scripts.Render("~/Scripts/Internal/dragdealers-manager.js")
            @Scripts.Render("~/Scripts/Internal/beach-details.js")
            @Scripts.Render("~/Scripts/Internal/reviews.js")
        }

        @section BeachStyles{
            @Styles.Render("~/Content/Internal/beach-details.css")
            @Styles.Render("~/Content/Internal/reviews.css")
            @Styles.Render("~/Content/External/slick/slick.css")
            @Styles.Render("~/Content/External/slick/slick-theme.css")
            @Styles.Render("~/Content/External/dragdealer.css")
        }
    }
    else
    {
        @Styles.Render("~/Content/Internal/beach-details.css")
        @Styles.Render("~/Content/Internal/reviews.css")
        @Styles.Render("~/Content/External/slick/slick.css")
        @Styles.Render("~/Content/External/slick/slick-theme.css")

        @Scripts.Render("~/Content/External/slick/slick.min.js")
        @Scripts.Render("~/Scripts/External/dragdealer.js")
        @Scripts.Render("~/Scripts/External/rainbowvis.js")
        @Scripts.Render("~/Scripts/Internal/dragdealers-manager.js")
        @Scripts.Render("~/Scripts/Internal/reviews.js")
        @Scripts.Render("~/Scripts/Internal/beach-details.js")
    }
}